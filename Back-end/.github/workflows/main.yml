name: CI/CD vary with docker (using secrets.APPLICATION)

on:
  push:
    branches:
      - main
      - develop

env:
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  PRIVATE_KEY: ${{ secrets.EC2_ACCESS_KEY }}

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest

    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'develop' || github.event_name == 'push' && github.ref == 'refs/heads/develop' && github.event.head_commit.message != 'Merge pull request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # ✅ GitHub Secrets에 저장된 application.yml 생성
      - name: Create application.yml from GitHub Secrets
        run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yml

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: docker build --platform linux/amd64 -t ${{ env.DOCKER_IMAGE_NAME }} .

      - name: Push Docker image
        run: docker push ${{ env.DOCKER_IMAGE_NAME }}

  deploy-to-ec2:
    needs: build-and-push-docker
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_HOST }}
          username: ubuntu
          key: ${{ env.PRIVATE_KEY }}
          script: |
            cd /home/ubuntu/
            sudo chmod 666 /var/run/docker.sock

            # 기존 컨테이너 정리
            sudo docker stop jangmadang-app-vary || true
            sudo docker rm -f jangmadang-app-vary || true

            # 최신 이미지 pull 후 컨테이너 실행
            sudo docker pull ${{ env.DOCKER_IMAGE_NAME }}
            sudo docker run -d \
              --name jangmadang-app-vary \
              --network jangmadang-net \
              -p 8081:8081 \
              -e TZ=Asia/Seoul \
              -e JAVA_OPTS="-Duser.timezone=Asia/Seoul" \
              ${{ env.DOCKER_IMAGE_NAME }}

            # 불필요한 이미지 정리
            sudo docker image prune -f
